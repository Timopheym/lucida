// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store_mat.proto

#ifndef PROTOBUF_store_5fmat_2eproto__INCLUDED
#define PROTOBUF_store_5fmat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace store_mat {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_store_5fmat_2eproto();
void protobuf_AssignDesc_store_5fmat_2eproto();
void protobuf_ShutdownFile_store_5fmat_2eproto();

class Map;
class Pair;
class mat_data;

// ===================================================================

class Map : public ::google::protobuf::Message {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  void Swap(Map* other);

  // implements Message ----------------------------------------------

  Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // repeated .store_mat.Pair pair = 2;
  inline int pair_size() const;
  inline void clear_pair();
  static const int kPairFieldNumber = 2;
  inline const ::store_mat::Pair& pair(int index) const;
  inline ::store_mat::Pair* mutable_pair(int index);
  inline ::store_mat::Pair* add_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::store_mat::Pair >&
      pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::store_mat::Pair >*
      mutable_pair();

  // @@protoc_insertion_point(class_scope:store_mat.Map)
 private:
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::store_mat::Pair > pair_;
  ::google::protobuf::uint32 size_;
  friend void  protobuf_AddDesc_store_5fmat_2eproto();
  friend void protobuf_AssignDesc_store_5fmat_2eproto();
  friend void protobuf_ShutdownFile_store_5fmat_2eproto();

  void InitAsDefaultInstance();
  static Map* default_instance_;
};
// -------------------------------------------------------------------

class Pair : public ::google::protobuf::Message {
 public:
  Pair();
  virtual ~Pair();

  Pair(const Pair& from);

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();

  void Swap(Pair* other);

  // implements Message ----------------------------------------------

  Pair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // required .store_mat.mat_data mat = 2;
  inline bool has_mat() const;
  inline void clear_mat();
  static const int kMatFieldNumber = 2;
  inline const ::store_mat::mat_data& mat() const;
  inline ::store_mat::mat_data* mutable_mat();
  inline ::store_mat::mat_data* release_mat();
  inline void set_allocated_mat(::store_mat::mat_data* mat);

  // @@protoc_insertion_point(class_scope:store_mat.Pair)
 private:
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_mat();
  inline void clear_has_mat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* str_;
  ::store_mat::mat_data* mat_;
  friend void  protobuf_AddDesc_store_5fmat_2eproto();
  friend void protobuf_AssignDesc_store_5fmat_2eproto();
  friend void protobuf_ShutdownFile_store_5fmat_2eproto();

  void InitAsDefaultInstance();
  static Pair* default_instance_;
};
// -------------------------------------------------------------------

class mat_data : public ::google::protobuf::Message {
 public:
  mat_data();
  virtual ~mat_data();

  mat_data(const mat_data& from);

  inline mat_data& operator=(const mat_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mat_data& default_instance();

  void Swap(mat_data* other);

  // implements Message ----------------------------------------------

  mat_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mat_data& from);
  void MergeFrom(const mat_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 row = 1;
  inline bool has_row() const;
  inline void clear_row();
  static const int kRowFieldNumber = 1;
  inline ::google::protobuf::uint32 row() const;
  inline void set_row(::google::protobuf::uint32 value);

  // required uint32 col = 2;
  inline bool has_col() const;
  inline void clear_col();
  static const int kColFieldNumber = 2;
  inline ::google::protobuf::uint32 col() const;
  inline void set_col(::google::protobuf::uint32 value);

  // required uint32 flags = 3;
  inline bool has_flags() const;
  inline void clear_flags();
  static const int kFlagsFieldNumber = 3;
  inline ::google::protobuf::uint32 flags() const;
  inline void set_flags(::google::protobuf::uint32 value);

  // required uint32 step = 4;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 4;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // required uint32 size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);

  // required uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated uint32 data = 7 [packed = true];
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline ::google::protobuf::uint32 data(int index) const;
  inline void set_data(int index, ::google::protobuf::uint32 value);
  inline void add_data(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:store_mat.mat_data)
 private:
  inline void set_has_row();
  inline void clear_has_row();
  inline void set_has_col();
  inline void clear_has_col();
  inline void set_has_flags();
  inline void clear_has_flags();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 row_;
  ::google::protobuf::uint32 col_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::uint32 step_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_;
  mutable int _data_cached_byte_size_;
  friend void  protobuf_AddDesc_store_5fmat_2eproto();
  friend void protobuf_AssignDesc_store_5fmat_2eproto();
  friend void protobuf_ShutdownFile_store_5fmat_2eproto();

  void InitAsDefaultInstance();
  static mat_data* default_instance_;
};
// ===================================================================


// ===================================================================

// Map

// required uint32 size = 1;
inline bool Map::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 Map::size() const {
  // @@protoc_insertion_point(field_get:store_mat.Map.size)
  return size_;
}
inline void Map::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:store_mat.Map.size)
}

// repeated .store_mat.Pair pair = 2;
inline int Map::pair_size() const {
  return pair_.size();
}
inline void Map::clear_pair() {
  pair_.Clear();
}
inline const ::store_mat::Pair& Map::pair(int index) const {
  // @@protoc_insertion_point(field_get:store_mat.Map.pair)
  return pair_.Get(index);
}
inline ::store_mat::Pair* Map::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:store_mat.Map.pair)
  return pair_.Mutable(index);
}
inline ::store_mat::Pair* Map::add_pair() {
  // @@protoc_insertion_point(field_add:store_mat.Map.pair)
  return pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::store_mat::Pair >&
Map::pair() const {
  // @@protoc_insertion_point(field_list:store_mat.Map.pair)
  return pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::store_mat::Pair >*
Map::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:store_mat.Map.pair)
  return &pair_;
}

// -------------------------------------------------------------------

// Pair

// required string str = 1;
inline bool Pair::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pair::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pair::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pair::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& Pair::str() const {
  // @@protoc_insertion_point(field_get:store_mat.Pair.str)
  return *str_;
}
inline void Pair::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:store_mat.Pair.str)
}
inline void Pair::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:store_mat.Pair.str)
}
inline void Pair::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:store_mat.Pair.str)
}
inline ::std::string* Pair::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:store_mat.Pair.str)
  return str_;
}
inline ::std::string* Pair::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Pair::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:store_mat.Pair.str)
}

// required .store_mat.mat_data mat = 2;
inline bool Pair::has_mat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pair::set_has_mat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pair::clear_has_mat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pair::clear_mat() {
  if (mat_ != NULL) mat_->::store_mat::mat_data::Clear();
  clear_has_mat();
}
inline const ::store_mat::mat_data& Pair::mat() const {
  // @@protoc_insertion_point(field_get:store_mat.Pair.mat)
  return mat_ != NULL ? *mat_ : *default_instance_->mat_;
}
inline ::store_mat::mat_data* Pair::mutable_mat() {
  set_has_mat();
  if (mat_ == NULL) mat_ = new ::store_mat::mat_data;
  // @@protoc_insertion_point(field_mutable:store_mat.Pair.mat)
  return mat_;
}
inline ::store_mat::mat_data* Pair::release_mat() {
  clear_has_mat();
  ::store_mat::mat_data* temp = mat_;
  mat_ = NULL;
  return temp;
}
inline void Pair::set_allocated_mat(::store_mat::mat_data* mat) {
  delete mat_;
  mat_ = mat;
  if (mat) {
    set_has_mat();
  } else {
    clear_has_mat();
  }
  // @@protoc_insertion_point(field_set_allocated:store_mat.Pair.mat)
}

// -------------------------------------------------------------------

// mat_data

// required uint32 row = 1;
inline bool mat_data::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mat_data::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mat_data::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mat_data::clear_row() {
  row_ = 0u;
  clear_has_row();
}
inline ::google::protobuf::uint32 mat_data::row() const {
  // @@protoc_insertion_point(field_get:store_mat.mat_data.row)
  return row_;
}
inline void mat_data::set_row(::google::protobuf::uint32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:store_mat.mat_data.row)
}

// required uint32 col = 2;
inline bool mat_data::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mat_data::set_has_col() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mat_data::clear_has_col() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mat_data::clear_col() {
  col_ = 0u;
  clear_has_col();
}
inline ::google::protobuf::uint32 mat_data::col() const {
  // @@protoc_insertion_point(field_get:store_mat.mat_data.col)
  return col_;
}
inline void mat_data::set_col(::google::protobuf::uint32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:store_mat.mat_data.col)
}

// required uint32 flags = 3;
inline bool mat_data::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mat_data::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mat_data::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mat_data::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
inline ::google::protobuf::uint32 mat_data::flags() const {
  // @@protoc_insertion_point(field_get:store_mat.mat_data.flags)
  return flags_;
}
inline void mat_data::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:store_mat.mat_data.flags)
}

// required uint32 step = 4;
inline bool mat_data::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mat_data::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mat_data::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mat_data::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 mat_data::step() const {
  // @@protoc_insertion_point(field_get:store_mat.mat_data.step)
  return step_;
}
inline void mat_data::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:store_mat.mat_data.step)
}

// required uint32 size = 5;
inline bool mat_data::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mat_data::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mat_data::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mat_data::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 mat_data::size() const {
  // @@protoc_insertion_point(field_get:store_mat.mat_data.size)
  return size_;
}
inline void mat_data::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:store_mat.mat_data.size)
}

// required uint32 type = 6;
inline bool mat_data::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mat_data::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mat_data::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mat_data::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 mat_data::type() const {
  // @@protoc_insertion_point(field_get:store_mat.mat_data.type)
  return type_;
}
inline void mat_data::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:store_mat.mat_data.type)
}

// repeated uint32 data = 7 [packed = true];
inline int mat_data::data_size() const {
  return data_.size();
}
inline void mat_data::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::uint32 mat_data::data(int index) const {
  // @@protoc_insertion_point(field_get:store_mat.mat_data.data)
  return data_.Get(index);
}
inline void mat_data::set_data(int index, ::google::protobuf::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:store_mat.mat_data.data)
}
inline void mat_data::add_data(::google::protobuf::uint32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:store_mat.mat_data.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
mat_data::data() const {
  // @@protoc_insertion_point(field_list:store_mat.mat_data.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
mat_data::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:store_mat.mat_data.data)
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace store_mat

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_store_5fmat_2eproto__INCLUDED
